{"remainingRequest":"/home/jean/workbench/projeto-consolidado/cronoanalise-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jean/workbench/projeto-consolidado/cronoanalise-client/src/views/empresa/show/Empresa.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jean/workbench/projeto-consolidado/cronoanalise-client/src/views/empresa/show/Empresa.vue","mtime":1575586686582},{"path":"/home/jean/workbench/projeto-consolidado/cronoanalise-client/node_modules/vuetify-loader/lib/loader.js","mtime":1575586686446},{"path":"/home/jean/workbench/projeto-consolidado/cronoanalise-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jean/workbench/projeto-consolidado/cronoanalise-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Router from '../../../router';\nimport Empresa from \"../empresa.service\";\nimport Validacoes from \"../../../components/Validacoes\";\nimport ZoomMaquinas from \"../../../components/Zoom/ZoomMaquinas/ZoomMaquinas\";\nimport {mdiPlusBoxOutline, mdiDelete, mdiPencil} from '@mdi/js';\n\nexport default {\n    name: \"Empresa\",\n    Router,\n    data: () => ({\n        dense: false,\n        fixedHeader: false,\n        height: 250,\n        icons: {\n            mdiPlusBoxOutline,\n            mdiDelete,\n            mdiPencil\n        },\n        msgDeAlertas: {\n            success: '',\n            error: '',\n            info: '',\n            warning: '',\n        },\n        empresa: {\n            oid: '',\n            cnpj: '',\n            nome: '',\n            turno: '',\n            fatorVelocidade: '',\n            fatorTolerancia: '',\n            paradas: [],\n        },\n        parada: {\n            descricao: '',\n            tempo: ''\n        },\n        opcoesParadas: [\n            'Almoço',\n            'Ginastica',\n            'Banheiro',\n            'Outros'\n        ],\n        validacoes: [],\n        valid: true,\n    }),\n    computed: {\n        formTitle() {\n            return this.$route.params.oid === 'new' ? 'Nova Empresa' : 'Editar Empresa';\n        },\n    },\n    created() {\n        if (this.$route.params.oid && this.$route.params.oid !== 'new') {\n            this.buscaEmpresa()\n        }\n    },\n    methods: {\n        buscaEmpresa() {\n            Empresa.buscaEmpresa(this.$route.params.oid).then(resposta => {\n                this.empresa = resposta.data;\n            }).catch(onError => {\n                if (onError.response && onError.response.data) {\n                    this.msgDeAlertas.error = onError.response.data.message;\n                } else {\n                    this.msgDeAlertas.error = onError;\n                }\n            });\n        },\n        adicionarParada() {\n            this.validaParada();\n            this.empresa.paradas.push(this.parada);\n            this.parada = {};\n        },\n        remover(index, oid) {\n            this.$swal.mixin({\n                customClass: {\n                    confirmButton: 'btn btn-success',\n                    cancelButton: 'btn btn-danger'\n                },\n                buttonsStyling: false\n            });\n            this.$swal.fire({\n                position: 'top',\n                title: 'Deseja remover essa parada?',\n                type: 'question',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Sim, remover!',\n                cancelButtonText: 'Não, cancelar!',\n                confirmButtonColor: 'hsl(119, 37%, 50%)',\n                cancelButtonColor: '#d33',\n                reverseButtons: true\n            }).then(resposta => {\n                if (resposta.value) {\n                    if (index > -1) {\n                        this.empresa.paradas.splice(index, 1);\n                    }\n                } else {\n                    this.onCancelado();\n                }\n            });\n        },\n        validaParada(e) {\n            this.validacoes = [];\n\n            if (!this.parada.descricao) {\n                this.validacoes.push('Digite uma descrição para Parada.');\n            }\n            if (!this.parada.tempo) {\n                this.validacoes.push('Digite um tempo de Parada.');\n            }\n            if (!this.validacoes.length) {\n                return true;\n            }\n            e.preventDefault();\n        },\n        save() {\n            this.checkForm();\n            if (this.empresa.oid) {\n                Empresa.post(this.empresa).then(resposta => {\n                    this.empresas = resposta.data;\n                    this.onSuccess(resposta.data);\n                    this.close();\n                }).catch(onError => {\n                    if (onError.response && onError.response.data) {\n                        this.onError(onError.response.data.message);\n                    } else {\n                        this.onError(onError);\n                    }\n                });\n            } else {\n                Empresa.post(this.empresa).then(resposta => {\n                    this.empresas = resposta.data;\n                    this.onSuccess(resposta.data);\n                    this.close();\n                }).catch(onError => {\n                    if (onError.response && onError.response.data) {\n                        this.onError(onError.response.data.message);\n                    } else {\n                        this.onError(onError);\n                    }\n                });\n            }\n        },\n        checkForm: function (e) {\n            this.validacoes = [];\n            \n            if (!this.empresa.nome) {\n                this.validacoes.push('O nome é obrigatório.');\n            }\n\n            if (!this.empresa.turno) {\n                this.validacoes.push('O turno é obrigatório.');\n            }\n\n            if (!this.empresa.fatorVelocidade) {\n                this.validacoes.push('O fator de velocidade é obrigatório.');\n            }\n\n            if (!this.validacoes.length) {\n                return true;\n            }\n\n            e.preventDefault();\n        },\n\n        validEmail: function (email) {\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            return re.test(email);\n        },\n        close() {\n            this.validacoes = [];\n            this.$router.push('/empresas');\n        },\n        onSuccess(msg) {\n            this.$swal.fire({\n                position: 'top',\n                type: 'success',\n                title: 'Sucesso',\n                text: msg,\n                showConfirmButton: false,\n                timer: 2000\n            });\n        },\n        onError(msg) {\n            this.$swal.fire({\n                position: 'top',\n                type: 'error',\n                title: 'Erro',\n                text: msg,\n                timer: 2000,\n            })\n        },\n        onCancelado(msg) {\n            this.$swal.fire({\n                position: 'top',\n                type: 'error',\n                title: 'Cancelado',\n                text: msg,\n                timer: 2000,\n            })\n        },\n    },\n    components: {Validacoes, ZoomMaquinas},\n};\n",{"version":3,"sources":["Empresa.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Empresa.vue","sourceRoot":"src/views/empresa/show","sourcesContent":["<template>\n    <v-card>\n        <v-card-title>\n            <span>{{ formTitle }}</span>\n        </v-card-title>\n\n        <v-card-text>\n            <v-container>\n                <v-row>\n                    <v-col cols=\"12\" sm=\"3\" md=\"3\">\n                        <v-text-field v-model=\"empresa.cnpj\"\n                                      label=\"CNPJ/CPF\" v-mask=\"['###.###.###-##', '##.###.###/####-##']\"></v-text-field>\n                    </v-col>\n                    <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                        <v-text-field v-model=\"empresa.nome\"\n                                      label=\"Nome\" required></v-text-field>\n                    </v-col>\n                    <v-col cols=\"12\" sm=\"3\" md=\"3\">\n                        <v-text-field v-model=\"empresa.turno\" suffix=\"Horas\"\n                                      label=\"Turno\" v-mask=\"['##:##','#:##']\"></v-text-field>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col cols=\"12\" sm=\"3\" md=\"3\">\n                        <v-text-field v-model=\"empresa.fatorVelocidade\"\n                                      v-mask=\"['#.####']\"\n                                      label=\"Fator de Velocidade\"></v-text-field>\n                    </v-col>\n                    <v-col cols=\"12\" sm=\"4\" md=\"4\">\n                        <v-select v-model=\"parada.descricao\" :items=\"opcoesParadas\"\n                                  label=\"Parada\" required></v-select>\n                    </v-col>\n                    <v-col cols=\"12\" sm=\"3\" md=\"3\">\n                        <v-text-field v-model=\"parada.tempo\"\n                                      label=\"Tempo em Minutos\" v-mask=\"['##','###']\"\n                                      @click:append=\"adicionarParada()\"\n                                      :append-icon=\"icons.mdiPlusBoxOutline\"></v-text-field>\n                    </v-col>\n                </v-row>\n                <v-simple-table :dense=\"dense\" :fixed-header=\"fixedHeader\" :height=\"height\">\n                    <thead>\n                    <tr>\n                        <th class=\"text-left\">Parada</th>\n                        <th class=\"text-left\">Tempo em Minutos</th>\n                        <th class=\"text-center\">Remover</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for=\"(item ,index) in empresa.paradas\" :key=\"item.descricao\">\n                        <td>{{ item.descricao }}</td>\n                        <td>{{ item.tempo }} Minutos</td>\n                        <td class=\"text-center\">\n                            <v-icon small color=\"red\" @click=\"remover(index,item.oid)\">{{icons.mdiDelete}}</v-icon>\n                        </td>\n                    </tr>\n                    </tbody>\n                </v-simple-table>\n                <br>\n                <validacoes :success=\"false\" :info=\"false\" :warning=\"validacoes\"\n                            :error=\"false\"></validacoes>\n            </v-container>\n        </v-card-text>\n        <v-card-actions>\n            <div class=\"flex-grow-1\"></div>\n            <v-btn color=\"grey darken-1\" @click=\"close\">Voltar</v-btn>\n            <v-btn color=\"green darken-1\" @click=\"save\">Salvar</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    import Router from '../../../router';\n    import Empresa from \"../empresa.service\";\n    import Validacoes from \"../../../components/Validacoes\";\n    import ZoomMaquinas from \"../../../components/Zoom/ZoomMaquinas/ZoomMaquinas\";\n    import {mdiPlusBoxOutline, mdiDelete, mdiPencil} from '@mdi/js';\n\n    export default {\n        name: \"Empresa\",\n        Router,\n        data: () => ({\n            dense: false,\n            fixedHeader: false,\n            height: 250,\n            icons: {\n                mdiPlusBoxOutline,\n                mdiDelete,\n                mdiPencil\n            },\n            msgDeAlertas: {\n                success: '',\n                error: '',\n                info: '',\n                warning: '',\n            },\n            empresa: {\n                oid: '',\n                cnpj: '',\n                nome: '',\n                turno: '',\n                fatorVelocidade: '',\n                fatorTolerancia: '',\n                paradas: [],\n            },\n            parada: {\n                descricao: '',\n                tempo: ''\n            },\n            opcoesParadas: [\n                'Almoço',\n                'Ginastica',\n                'Banheiro',\n                'Outros'\n            ],\n            validacoes: [],\n            valid: true,\n        }),\n        computed: {\n            formTitle() {\n                return this.$route.params.oid === 'new' ? 'Nova Empresa' : 'Editar Empresa';\n            },\n        },\n        created() {\n            if (this.$route.params.oid && this.$route.params.oid !== 'new') {\n                this.buscaEmpresa()\n            }\n        },\n        methods: {\n            buscaEmpresa() {\n                Empresa.buscaEmpresa(this.$route.params.oid).then(resposta => {\n                    this.empresa = resposta.data;\n                }).catch(onError => {\n                    if (onError.response && onError.response.data) {\n                        this.msgDeAlertas.error = onError.response.data.message;\n                    } else {\n                        this.msgDeAlertas.error = onError;\n                    }\n                });\n            },\n            adicionarParada() {\n                this.validaParada();\n                this.empresa.paradas.push(this.parada);\n                this.parada = {};\n            },\n            remover(index, oid) {\n                this.$swal.mixin({\n                    customClass: {\n                        confirmButton: 'btn btn-success',\n                        cancelButton: 'btn btn-danger'\n                    },\n                    buttonsStyling: false\n                });\n                this.$swal.fire({\n                    position: 'top',\n                    title: 'Deseja remover essa parada?',\n                    type: 'question',\n                    icon: 'warning',\n                    showCancelButton: true,\n                    confirmButtonText: 'Sim, remover!',\n                    cancelButtonText: 'Não, cancelar!',\n                    confirmButtonColor: 'hsl(119, 37%, 50%)',\n                    cancelButtonColor: '#d33',\n                    reverseButtons: true\n                }).then(resposta => {\n                    if (resposta.value) {\n                        if (index > -1) {\n                            this.empresa.paradas.splice(index, 1);\n                        }\n                    } else {\n                        this.onCancelado();\n                    }\n                });\n            },\n            validaParada(e) {\n                this.validacoes = [];\n\n                if (!this.parada.descricao) {\n                    this.validacoes.push('Digite uma descrição para Parada.');\n                }\n                if (!this.parada.tempo) {\n                    this.validacoes.push('Digite um tempo de Parada.');\n                }\n                if (!this.validacoes.length) {\n                    return true;\n                }\n                e.preventDefault();\n            },\n            save() {\n                this.checkForm();\n                if (this.empresa.oid) {\n                    Empresa.post(this.empresa).then(resposta => {\n                        this.empresas = resposta.data;\n                        this.onSuccess(resposta.data);\n                        this.close();\n                    }).catch(onError => {\n                        if (onError.response && onError.response.data) {\n                            this.onError(onError.response.data.message);\n                        } else {\n                            this.onError(onError);\n                        }\n                    });\n                } else {\n                    Empresa.post(this.empresa).then(resposta => {\n                        this.empresas = resposta.data;\n                        this.onSuccess(resposta.data);\n                        this.close();\n                    }).catch(onError => {\n                        if (onError.response && onError.response.data) {\n                            this.onError(onError.response.data.message);\n                        } else {\n                            this.onError(onError);\n                        }\n                    });\n                }\n            },\n            checkForm: function (e) {\n                this.validacoes = [];\n                \n                if (!this.empresa.nome) {\n                    this.validacoes.push('O nome é obrigatório.');\n                }\n\n                if (!this.empresa.turno) {\n                    this.validacoes.push('O turno é obrigatório.');\n                }\n\n                if (!this.empresa.fatorVelocidade) {\n                    this.validacoes.push('O fator de velocidade é obrigatório.');\n                }\n\n                if (!this.validacoes.length) {\n                    return true;\n                }\n\n                e.preventDefault();\n            },\n\n            validEmail: function (email) {\n                var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                return re.test(email);\n            },\n            close() {\n                this.validacoes = [];\n                this.$router.push('/empresas');\n            },\n            onSuccess(msg) {\n                this.$swal.fire({\n                    position: 'top',\n                    type: 'success',\n                    title: 'Sucesso',\n                    text: msg,\n                    showConfirmButton: false,\n                    timer: 2000\n                });\n            },\n            onError(msg) {\n                this.$swal.fire({\n                    position: 'top',\n                    type: 'error',\n                    title: 'Erro',\n                    text: msg,\n                    timer: 2000,\n                })\n            },\n            onCancelado(msg) {\n                this.$swal.fire({\n                    position: 'top',\n                    type: 'error',\n                    title: 'Cancelado',\n                    text: msg,\n                    timer: 2000,\n                })\n            },\n        },\n        components: {Validacoes, ZoomMaquinas},\n    };\n</script>\n\n<style scoped>\n\n</style>"]}]}